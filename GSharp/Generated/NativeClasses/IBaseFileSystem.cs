//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GSharp.Generated.NativeClasses {
    using System.ComponentModel;
    using System.Runtime.InteropServices;
    using System;
    
    
    public interface IBaseFileSystem {
        
        /// <param name='pOutput'></param>
        /// <param name='size'></param>
        /// <param name='file'></param>
        int Read(System.IntPtr pOutput, int size, System.IntPtr file);
        
        /// <param name='pInput'></param>
        /// <param name='size'></param>
        /// <param name='file'></param>
        int Write(System.IntPtr pInput, int size, System.IntPtr file);
        
        /// <param name='pFileName'></param>
        /// <param name='pOptions'></param>
        /// <param name='pathID'>Default: 0</param>
        System.IntPtr Open(string pFileName, string pOptions, [OptionalAttribute()] [DefaultValueAttribute(0)] string pathID);
        
        /// <param name='file'></param>
        void Close(System.IntPtr file);
        
        /// <param name='file'></param>
        /// <param name='pos'></param>
        /// <param name='seekType'></param>
        void Seek(System.IntPtr file, int pos, System.IntPtr seekType);
        
        /// <param name='file'></param>
        uint Tell(System.IntPtr file);
        
        /// <param name='file'></param>
        uint Size(System.IntPtr file);
        
        /// <param name='pFileName'></param>
        /// <param name='pPathID'>Default: 0</param>
        uint Size(string pFileName, [OptionalAttribute()] [DefaultValueAttribute(0)] string pPathID);
        
        /// <param name='file'></param>
        void Flush(System.IntPtr file);
        
        /// <param name='pFileName'></param>
        /// <param name='pPathID'>Default: 0</param>
        bool Precache(string pFileName, [OptionalAttribute()] [DefaultValueAttribute(0)] string pPathID);
        
        /// <param name='pFileName'></param>
        /// <param name='pPathID'>Default: 0</param>
        bool FileExists(string pFileName, [OptionalAttribute()] [DefaultValueAttribute(0)] string pPathID);
        
        /// <param name='pFileName'></param>
        /// <param name='pPathID'>Default: 0</param>
        bool IsFileWritable(string pFileName, [OptionalAttribute()] [DefaultValueAttribute(0)] string pPathID);
        
        /// <param name='pFileName'></param>
        /// <param name='writable'></param>
        /// <param name='pPathID'>Default: 0</param>
        bool SetFileWritable(string pFileName, bool writable, [OptionalAttribute()] [DefaultValueAttribute(0)] string pPathID);
        
        /// <param name='pFileName'></param>
        /// <param name='pPathID'>Default: 0</param>
        int GetFileTime(string pFileName, [OptionalAttribute()] [DefaultValueAttribute(0)] string pPathID);
        
        /// <param name='pFileName'></param>
        /// <param name='pPath'></param>
        /// <param name='buf'></param>
        /// <param name='nMaxBytes'>Default: 0</param>
        /// <param name='nStartingByte'>Default: 0</param>
        /// <param name='pfnAlloc'></param>
        bool ReadFile(string pFileName, string pPath, System.IntPtr buf, [OptionalAttribute()] [DefaultValueAttribute(0)] int nMaxBytes, [OptionalAttribute()] [DefaultValueAttribute(0)] int nStartingByte, System.IntPtr pfnAlloc);
        
        /// <param name='pFileName'></param>
        /// <param name='pPath'></param>
        /// <param name='buf'></param>
        bool WriteFile(string pFileName, string pPath, System.IntPtr buf);
        
        /// <param name='pFileName'></param>
        /// <param name='pPath'></param>
        /// <param name='pDestination'></param>
        bool UnzipFile(string pFileName, string pPath, string pDestination);
    }
}
